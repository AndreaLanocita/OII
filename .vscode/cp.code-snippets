{
	// Place your c++ workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log(\"$1\");",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"Start": {
		"prefix": ["#include", "start"],
		"body": [
			"#include <bits/stdc++.h> \n\nusing namespace std;\n\n#define vi vector<int>\n#define pi pair<int, int>\n#define vp vector<pi>\n#define ll long long int\n#define omap map<int, int>\n#define umap unordered_map<int, int>\n\nint main() {\n\t$0\n\treturn 0;\n}"
		]
	},

	"Grader": {
		"prefix": ["main", "grader"],
		"body": [
			"int main() {\n\tfreopen(\"input.txt\", \"r\", stdin);\n\tfreopen(\"output.txt\", \"w\", stdout);\n\n\tint N;\n\tcin >> N;\n\n\tfor(int i=0; i<N; i++) {\t\n\t\t\n\t}\n\n\treturn 0;\n}"
		]
	},

	"Definitions": {
		"prefix": ["definitions"],
		"body": "#define pb push_back\n#define popb pop_back\n#define vi vector<int>\n#define pi pair<int, int>\n#define vp vector<pi>\n#define ll long long int\n#define pl pair<ll, ll>\n#define vl vector<ll>\n#define vpl vector<pl>\n#define omap map<int, int>\n#define umap unordered_map<int, int>\n#define pq priority_queue<pair<ll, int>, vector<pair<ll, int>>, greater<pair<ll, int>>>"
	}
}