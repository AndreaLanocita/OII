{
	// Place your c++ workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log(\"$1\");",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"Start": {
		"prefix": ["#include", "start"],
		"body": [
			"#include <bits/stdc++.h> \n\nusing namespace std;\n\n#define vi vector<int>\n#define pi pair<int, int>\n#define vp vector<pi>\n#define ll long long int\n#define omap map<int, int>\n#define umap unordered_map<int, int>\n\nint main() {\n\tcin.tie(nullptr);ios::sync_with_stdio(false);\n\t//Remember to use \\n<<flush\n\t$0\n\treturn 0;\n}"
		]
	},

	"Grader": {
		"prefix": ["main", "grader"],
		"body": [
			"int main() {\n\tfreopen(\"input.txt\", \"r\", stdin);\n\tfreopen(\"output.txt\", \"w\", stdout);\n\n\tint N;\n\tcin >> N;\n\n\tfor(int i=0; i<N; i++) {\t\n\t\t\n\t}\n\n\treturn 0;\n}"
		]
	},

	"Definitions": {
		"prefix": ["definitions"],
		"body": "#define pb push_back\n#define popb pop_back\n#define vi vector<int>\n#define pi pair<int, int>\n#define vp vector<pi>\n#define ll long long int\n#define pl pair<ll, ll>\n#define vl vector<ll>\n#define vpl vector<pl>\n#define omap map<int, int>\n#define umap unordered_map<int, int>\n#define pq priority_queue<pair<ll, int>, vector<pair<ll, int>>, greater<pair<ll, int>>>"
	},

	"Fast IO": {
		"prefix": ["Fast IO", "IO"],
		"body": [
			"#include <bits/stdc++.h>",
			"using namespace std;",
			"",
			"const int BUF_SZ = 1 << 15;inline namespace Input {    char buf[BUF_SZ];    int pos;    int len;    char next_char() {        if (pos == len)        {            pos = 0;            len = (int)fread(buf, 1, 1, stdin);            if (!len)            {                return EOF;            }        }        return buf[pos++];    }    int read_int()    {        int x;        char ch;        int sgn = 1;        while (!isdigit(ch = next_char()))        {            if (ch == '-')            {                sgn *= -1;            }        }        x = ch - '0';        while (isdigit(ch = next_char()))        {            x = x * 10 + (ch - '0');        }        return x * sgn;    }} inline namespace Output{    char buf[BUF_SZ];    int pos;    void flush_out()    {        fwrite(buf, 1, pos, stdout);        pos = 0;    }    void write_char(char c)    {        if (pos == BUF_SZ)        {            flush_out();        }        buf[pos++] = c;    }    void write_int(int x) {        static char num_buf[100];        if (x < 0)        {            write_char('-');            x *= -1;        }        int len = 0;        for (; x >= 10; x /= 10){            num_buf[len++] = (char)('0' + (x % 10));        }        write_char((char)('0' + x));        while (len) {            write_char(num_buf[--len]);        }        write_char('\\n');    }    void init_output() { assert(atexit(flush_out) == 0); }} ",
			"",
			"int main() {",
			"    init_output();",
			"    int N = read_int();",
			"    write_int(N);",
			"    return 0;",
			"}",
		]
	}

	
}